#include <UTFT.h>
#include <URTouch.h>
#include <Keypad.h>
bool hasAccess;
String password="";
const byte ROWS = 5; 
const byte COLS = 4; 
int buzzer = 11;
char keys[ROWS][COLS] = {
  {'F','f','#','*'},
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'S','0','H','D'}
};
byte rowPins[ROWS] = {2,3,4,5,6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {9,10,8,7}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
struct RxStruct {
    char textB[16];        
    int valC;               
    unsigned long valD;                                                      
};
RxStruct rxData;
bool newData = false;
const byte startMarker = 255;
const byte rxDataLen = sizeof(rxData);

UTFT    myGLCD(ILI9486,38,39,40,41);
URTouch  myTouch( 6, 5, 4, 3, 2);

extern uint8_t BigFont[];

void setup()
{
  myGLCD.InitLCD();
  myGLCD.clrScr();
  myTouch.setPrecision(PREC_MEDIUM);
  myGLCD.setFont(BigFont);
  myGLCD.setBackColor(0, 0, 0);
  Serial.begin(9600);
  Serial.println("\nStarting SerialStructReceive.ino\n");
  Serial1.begin(9600);
  pinMode(7, OUTPUT);
  pinMode(buzzer, OUTPUT);
  hasAccess=false;
}

void loop()
  
{
  if(hasAccess==false){
  char key = keypad.getKey();
  if (key != NO_KEY){   
    password = password + key;
    if(key=='A')
    {
      Serial.println("Enter Password");
       myGLCD.print("Enter Password", 10, 0);
        password="";
    }
    
    if(key=='D')
    {
      Serial.println("Validate the Password");
      myGLCD.print("Enter Password", 10, 0);
        
        if (password=="123D")
        {
          Serial.println("Access Granted");
          myGLCD.print("Access Granted", 10, 0);
          recvStructWithKnownLength();
          if (newData == true) {
        showNewData();
        newData = false;
    }
        hasAccess=true;
        }
        else
        {
          Serial.println("Access Denied");
          myGLCD.print("Access Denied", 10, 0);
        }      
    }         
  }
}
else
{
  myGLCD.print("Access Granted", 10, 0);
          recvStructWithKnownLength();
          if (newData == true) {
        showNewData();
        newData = false;
}
}
}
void showNewData() {
    Serial.print("This just in    ");
    Serial.print(rxData.textB);
    myGLCD.print(rxData.textB, 10, 30);
    Serial.print(' ');
    Serial.print(rxData.valC);
    Serial.print(' ');
    if(rxData.valC>260)
    {
      tone(buzzer, 1000);
    }
    else{
       noTone(buzzer);
    }
    myGLCD.print(String(rxData.valC), 10, 60);
    Serial.println(rxData.valD);
    myGLCD.print(String(rxData.valD), 10, 90);
    
}

void recvStructWithKnownLength() {
    static byte recvData[rxDataLen];
    byte rb;
    byte * structStart;
    structStart = reinterpret_cast <byte *> (&rxData);
    if (Serial1.available() >= rxDataLen + 1 and newData == false) {
        rb = Serial1.read();
        if (rb == startMarker) {    
            for (byte n = 0; n < rxDataLen; n++) {
                *(structStart + n) = Serial1.read();
            }  
            while (Serial1.available() > 0) {
                byte dumpTheData = Serial1.read();
            }
            newData = true;
        }
    }
}


 
  
