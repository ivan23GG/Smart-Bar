#include "Wire.h"
#include <MPU6050_light.h>

MPU6050 mpuA(Wire);
MPU6050 mpuB(Wire); 

//long timer = 0;

int AGx, AGy, AGz, AAx, AAy, AAz, BGx, BGy, BGz, BAx, BAy, BAz;               
int AGxI, AGyI, AGzI, AAxI, AAyI, AAzI, BGxI, BGyI, BGzI, BAxI, BAyI, BAzI;   
float AcczA, AcczB;

int prov = 0, provGresh = 0, rep = 0, br = 1, clean = 5;

void setup() {
  Serial.begin(115200);
  Wire.begin();

  init_call();
}

void loop() {
  read_gyro();
  delay(50);
// Serial.print(AcczA);Serial.print("\n");Serial.print(AcczB);Serial.print("\n");
 if ((0.9 < AcczA && AcczA < 1.1) && (0.9 < AcczB && AcczB< 1.1)){
    delay(50);
    if (provGresh*5 > prov && br == 1){
      if(prov != 0){
        Serial.print("\nN ");
        br = 0;
        clean = 0;
        //tuka prati samo che ne e bilo chisto ne pishi za koe povtorenie e, tuk izprati kum lorata
        delay(50);
      }
      //Serial.print(provGresh);Serial.print(" ");Serial.print(prov);
    }else{
      delay(50);
      //Serial.print("\nlolo\n "); Serial.print(prov);Serial.print("\n");Serial.print(br);
      if(prov != 0 && br == 1){
        Serial.print("\nSSS ");
        clean = 1;
        rep++;
        Serial.print(rep);
        br = 0;
        //rep e povtorenieto clean e dali e chisto ili ne, tuk izprati kum lorata
        delay(50);
      }
    }
    provGresh = 0;
    prov = 0;
  
  }else{
    prov ++; 
    if(AcczA > 1.46 && AcczB > 1.46){ 
      br = 1;
    }
    if(abs(AGx) - abs(BGx) >= 20){
      //Serial.print("\n greshnoX ");
      provGresh ++;      
      }else{       
        if(abs(AGy) - abs(BGy) >= 20){
          //Serial.print("\n greshnoY ");
          provGresh ++;
        }else{
          if(abs(AGz) - abs(BGz) >= 7){
            //Serial.print("\n greshnoZ ");
            provGresh ++;
          }else{
            if(abs(AGxI) - abs(BGxI) >= 7){
              //Serial.print("\n greshnoXI ");
              provGresh ++;
            }else{
              if(abs(AGyI) - abs(BGyI) >= 7){
              //Serial.print("\n greshnoYI ");
              provGresh ++;
              }else{
                if(abs(AGzI) - abs(BGzI) >= 5){
                  //Serial.print("\n greshnoZI ");
                  provGresh ++;
                }
                //else{
                //};
              };
            };
          };
        };
      };
  };

  //Serial.print("\nAcczA: "); Serial.print(AcczA); Serial.print("  AcczB: "); Serial.print(AcczB);

  // if(abs(AGx) - abs(BGx) >= 4){
  //   Serial.print("\n greshno ");
  // }else{
  //   if(abs(AGy) - abs(BGy) >= 2){
  //     Serial.print("\n greshno ");
  //   }else{
  //     if(abs(AGz) - abs(BGz) >= 25){
  //       Serial.print("\n greshno ");
  //     }else{
  //       if(abs(AGxI) - abs(BGxI) >= 1){
  //         Serial.print("\n greshno ");
  //       }else{
  //         if(abs(AGyI) - abs(BGyI) >= 1){
  //         Serial.print("\n greshno ");
  //         }else{
  //           if(abs(AGzI) - abs(BGzI) >= 1){
  //             Serial.print("\n greshno ");
  //           }else{
  //             Serial.print("\n pravilno ");
  //           };
  //         };
  //       };
  //     };
  //   };
  // };
  
  // Serial.print("\nAGx: "); Serial.print(abs(AGx)); Serial.print("  BGx: "); Serial.print(abs(BGx));
  // Serial.print("\nAGy: "); Serial.print(AGy); Serial.print("  BGy: "); Serial.print(BGy);
  // Serial.print("\nAGz: "); Serial.print(AGz); Serial.print("  BGz: "); Serial.print(BGz);
  // Serial.print("\n-------------------------------");
  // Serial.print("\nAGxI: "); Serial.print(AGxI); Serial.print("  BGxI: "); Serial.print(BGxI);
  // Serial.print("\nAGyI: "); Serial.print(AGyI); Serial.print("  BGyI: "); Serial.print(BGyI);
  // Serial.print("\nAGzI: "); Serial.print(AGzI); Serial.print("  BGzI: "); Serial.print(BGzI);
  // Serial.print("\n-------------------------------");

 }


void init_call() {
  Serial.println(F("Calculating gyro offset."));
  mpuA.setAddress(0x68);
  delay(50);
  mpuA.begin();
  delay(50);
  mpuA.calcOffsets();
  delay(50);
  mpuB.setAddress(0x69);
  delay(50);
  mpuB.begin();
  delay(50);
  mpuB.calcOffsets();
  delay(50);
  
  Serial.println(F("Calculating gyro offset Done!"));
  delay(100);
}

void read_gyro(){
  mpuA.update();
  mpuB.update();

  AcczA = mpuA.getAccZ();
  AcczB = mpuB.getAccZ();
  
  AGx = mpuA.getAngleX();
  AGy = mpuA.getAngleY();
  AGz = mpuA.getAngleZ();
  BGx = mpuB.getAngleX();
  BGy = mpuB.getAngleY();
  BGz = mpuB.getAngleZ();
  AGz = mpuA.getAngleZ();
  
  AGxI = mpuA.getGyroX();
  AGyI = mpuA.getGyroY();
  AGzI = mpuA.getGyroZ();
  BGxI = mpuB.getGyroX();
  BGyI = mpuB.getGyroY();
  BGzI = mpuB.getGyroZ();
  AGzI = mpuA.getGyroZ();

}
