
#include "Wire.h"
#include <MPU6050_light.h>

MPU6050 mpuA(Wire);
MPU6050 mpuB(Wire); 

//long timer = 0;

int AGx, AGy, AGz, AAx, AAy, AAz, BGx, BGy, BGz, BAx, BAy, BAz;               
int AGxI, AGyI, AGzI, AAxI, AAyI, AAzI, BGxI, BGyI, BGzI, BAxI, BAyI, BAzI;   
float AcczA, AcczB;

void setup() {
  Serial.begin(115200);
  Wire.begin();

  init_call();
}

void loop() {
  read_gyro();

 if ((0.96 < AcczA && AcczA < 1.04) && (0.96 < AcczB && AcczB< 1.04)){
    Serial.print("\n starting point ");
    Serial.print("\nAcczA: "); Serial.print(AcczA); Serial.print("  AcczB: "); Serial.print(AcczB);
  }else{
    Serial.print("\n repping ");
    Serial.print("\nAcczA: "); Serial.print(AcczA); Serial.print("  AcczB: "); Serial.print(AcczB);
  }

  //Serial.print("\nAcczA: "); Serial.print(AcczA); Serial.print("  AcczB: "); Serial.print(AcczB);

  // if(abs(AGx) - abs(BGx) >= 4){
  //   Serial.print("\n greshno ");
  // }else{
  //   if(abs(AGy) - abs(BGy) >= 2){
  //     Serial.print("\n greshno ");
  //   }else{
  //     if(abs(AGz) - abs(BGz) >= 25){
  //       Serial.print("\n greshno ");
  //     }else{
  //       if(abs(AGxI) - abs(BGxI) >= 1){
  //         Serial.print("\n greshno ");
  //       }else{
  //         if(abs(AGyI) - abs(BGyI) >= 1){
  //         Serial.print("\n greshno ");
  //         }else{
  //           if(abs(AGzI) - abs(BGzI) >= 1){
  //             Serial.print("\n greshno ");
  //           }else{
  //             Serial.print("\n pravilno ");
  //           };
  //         };
  //       };
  //     };
  //   };
  // };
  
  // Serial.print("\nAGx: "); Serial.print(abs(AGx)); Serial.print("  BGx: "); Serial.print(abs(BGx));
  // Serial.print("\nAGy: "); Serial.print(AGy); Serial.print("  BGy: "); Serial.print(BGy);
  // Serial.print("\nAGz: "); Serial.print(AGz); Serial.print("  BGz: "); Serial.print(BGz);
  // Serial.print("\n-------------------------------");
  // Serial.print("\nAGxI: "); Serial.print(AGxI); Serial.print("  BGxI: "); Serial.print(BGxI);
  // Serial.print("\nAGyI: "); Serial.print(AGyI); Serial.print("  BGyI: "); Serial.print(BGyI);
  // Serial.print("\nAGzI: "); Serial.print(AGzI); Serial.print("  BGzI: "); Serial.print(BGzI);
  // Serial.print("\n-------------------------------");
  
  delay(1500);
 }


void init_call() {
  Serial.println(F("Calculating gyro offset."));
  mpuA.setAddress(0x68);
  delay(50);
  mpuA.begin();
  delay(50);
  mpuA.calcOffsets();
  delay(50);
  mpuB.setAddress(0x69);
  delay(50);
  mpuB.begin();
  delay(50);
  mpuB.calcOffsets();
  delay(50);
  
  Serial.println(F("Calculating gyro offset Done!"));
  delay(100);
}

void read_gyro(){
  mpuA.update();
  mpuB.update();

  AcczA = mpuA.getAccZ();
  AcczB = mpuB.getAccZ();
  
  AGx = mpuA.getAngleX();
  AGy = mpuA.getAngleY();
  AGz = mpuA.getAngleZ();
  BGx = mpuB.getAngleX();
  BGy = mpuB.getAngleY();
  BGz = mpuB.getAngleZ();
  AGz = mpuA.getAngleZ();
  
  AGxI = mpuA.getGyroX();
  AGyI = mpuA.getGyroY();
  AGzI = mpuA.getGyroZ();
  BGxI = mpuB.getGyroX();
  BGyI = mpuB.getGyroY();
  BGzI = mpuB.getGyroZ();
  AGzI = mpuA.getGyroZ();

}
