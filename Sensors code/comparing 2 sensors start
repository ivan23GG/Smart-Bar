/* Get all possible data from MPU6050
 * Accelerometer values are given as multiple of the gravity [1g = 9.81 m/sÂ²]
 * Gyro values are given in deg/s
 * Angles are given in degrees
 * Note that X and Y are tilt angles and not pitch/roll.
 *
 * License: MIT
 */

#include "Wire.h"
#include <MPU6050_light.h>

MPU6050 mpuA(Wire);
MPU6050 mpuB(Wire); 

long timer = 0;

void setup() {
  Serial.begin(9600);
  Wire.begin();
  
  mpuA.setAddress(0x68);
    mpuA.begin();
    Serial.println(F("Calculating gyro offset, do not move MPU6050"));
    delay(1000);
    mpuA.calcGyroOffsets();
    Serial.println("Done.");
  mpuB.begin();
    Serial.println(F("Calculating gyro offset, do not move MPU6050"));
    delay(1000);
    mpuB.setAddress(0x69);
    mpuB.calcGyroOffsets();
    Serial.println("Done.");

}

void loop() {
  mpuA.update();

  if(millis() - timer > 1000){ // print data every second
    Serial.print("\nZ: ");Serial.println(mpuA.getAccZ());
    Serial.print("\nGYRO      X: ");Serial.print(mpuA.getGyroX());
    Serial.print("\nY: ");Serial.print(mpuA.getGyroY());
    Serial.print("\nZ: ");Serial.println(mpuA.getGyroZ());
    Serial.println(F("=====================================================\n"));
    timer = millis();
  }
   mpuB.update();

  if(millis() - timer > 1000){ // print data every second
        Serial.print("\nZ: ");Serial.println(mpuB.getAccZ());
    Serial.print("\nGYRO      X: ");Serial.print(mpuB.getGyroX());
    Serial.print("\nY: ");Serial.print(mpuB.getGyroY());
    Serial.print("\nZ: ");Serial.println(mpuB.getGyroZ());
    Serial.println(F("=====================================================\n"));
    timer = millis();
  }

}
